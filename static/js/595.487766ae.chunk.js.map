{"version":3,"file":"static/js/595.487766ae.chunk.js","mappings":"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","sources":["components/InFlightTracker.tsx","plane-icon.svg"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useTheme } from '../context/ThemeContext';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport planeIcon from '../plane-icon.svg';\r\n\r\n// Fix for default markers\r\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\ninterface FlightData {\r\n  latitude: number | null;\r\n  longitude: number | null;\r\n  altitude: number | null;\r\n  speed: number | null;\r\n  heading: number | null;\r\n  lastUpdate: Date;\r\n  gpsAccuracy: number | null;\r\n}\r\n\r\n// Conversion functions\r\nconst metersToFeet = (meters: number): number => {\r\n  return Math.round(meters * 3.28084);\r\n};\r\n\r\nconst kmhToKnots = (kmh: number): number => {\r\n  return Math.round(kmh * 0.539957);\r\n};\r\n\r\nconst InFlightTracker: React.FC = () => {\r\n  const { isDarkMode } = useTheme();\r\n  const [flightData, setFlightData] = useState<FlightData>({\r\n    latitude: null,\r\n    longitude: null,\r\n    altitude: null,\r\n    speed: null,\r\n    heading: null,\r\n    lastUpdate: new Date(),\r\n    gpsAccuracy: null,\r\n  });\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isGpsAvailable, setIsGpsAvailable] = useState<boolean>(true);\r\n  const mapRef = useRef<L.Map | null>(null);\r\n  const markerRef = useRef<L.Marker | null>(null);\r\n  const accuracyCircleRef = useRef<L.Circle | null>(null);\r\n  const watchId = useRef<number | null>(null);\r\n  const lastKnownPosition = useRef<GeolocationPosition | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize map\r\n    if (!mapRef.current) {\r\n      mapRef.current = L.map('map').setView([0, 0], 2);\r\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: 'Â© OpenStreetMap contributors'\r\n      }).addTo(mapRef.current);\r\n    }\r\n\r\n    // Check if GPS is available\r\n    if (!navigator.geolocation) {\r\n      setIsGpsAvailable(false);\r\n      setError('GPS is not available on this device');\r\n      return;\r\n    }\r\n\r\n    const startTracking = async () => {\r\n      try {\r\n        watchId.current = navigator.geolocation.watchPosition(\r\n          (position) => {\r\n            lastKnownPosition.current = position;\r\n            const newData = {\r\n              latitude: position.coords.latitude,\r\n              longitude: position.coords.longitude,\r\n              altitude: position.coords.altitude,\r\n              speed: position.coords.speed,\r\n              heading: position.coords.heading,\r\n              lastUpdate: new Date(),\r\n              gpsAccuracy: position.coords.accuracy,\r\n            };\r\n            setFlightData(newData);\r\n            setError(null);\r\n\r\n            // Update map with new position\r\n            if (mapRef.current && newData.latitude && newData.longitude) {\r\n              const latLng = L.latLng(newData.latitude, newData.longitude);\r\n              \r\n              // Update or create marker\r\n              if (!markerRef.current) {\r\n                markerRef.current = L.marker(latLng, {\r\n                  icon: L.divIcon({\r\n                    html: `<div style=\"transform: rotate(${newData.heading || 0}deg)\">\r\n                      <img src=\"${planeIcon}\" alt=\"plane\" style=\"width: 24px; height: 24px;\" />\r\n                    </div>`,\r\n                    className: '',\r\n                    iconSize: [24, 24],\r\n                    iconAnchor: [12, 12]\r\n                  })\r\n                }).addTo(mapRef.current);\r\n              } else {\r\n                markerRef.current.setLatLng(latLng);\r\n                markerRef.current.setIcon(L.divIcon({\r\n                  html: `<div style=\"transform: rotate(${newData.heading || 0}deg)\">\r\n                    <img src=\"${planeIcon}\" alt=\"plane\" style=\"width: 24px; height: 24px;\" />\r\n                  </div>`,\r\n                  className: '',\r\n                  iconSize: [24, 24],\r\n                  iconAnchor: [12, 12]\r\n                }));\r\n              }\r\n\r\n              // Update or create accuracy circle\r\n              if (!accuracyCircleRef.current) {\r\n                accuracyCircleRef.current = L.circle(latLng, {\r\n                  radius: newData.gpsAccuracy || 0,\r\n                  color: isDarkMode ? '#60a5fa' : '#3b82f6',\r\n                  fillColor: isDarkMode ? '#60a5fa' : '#3b82f6',\r\n                  fillOpacity: 0.2,\r\n                  weight: 1\r\n                }).addTo(mapRef.current);\r\n              } else {\r\n                accuracyCircleRef.current.setLatLng(latLng);\r\n                accuracyCircleRef.current.setRadius(newData.gpsAccuracy || 0);\r\n              }\r\n\r\n              // Center map on position\r\n              mapRef.current.setView(latLng, mapRef.current.getZoom());\r\n            }\r\n          },\r\n          (error) => {\r\n            console.warn('GPS Error:', error);\r\n            setError(`GPS Error: ${error.message}`);\r\n            \r\n            // Keep using last known position if available\r\n            if (lastKnownPosition.current) {\r\n              const newData = {\r\n                latitude: lastKnownPosition.current.coords.latitude,\r\n                longitude: lastKnownPosition.current.coords.longitude,\r\n                altitude: lastKnownPosition.current.coords.altitude,\r\n                speed: lastKnownPosition.current.coords.speed,\r\n                heading: lastKnownPosition.current.coords.heading,\r\n                lastUpdate: new Date(),\r\n                gpsAccuracy: lastKnownPosition.current.coords.accuracy,\r\n              };\r\n              setFlightData(newData);\r\n\r\n              // Update map with last known position\r\n              if (mapRef.current && newData.latitude && newData.longitude) {\r\n                const latLng = L.latLng(newData.latitude, newData.longitude);\r\n                if (markerRef.current) {\r\n                  markerRef.current.setLatLng(latLng);\r\n                  markerRef.current.setIcon(L.divIcon({\r\n                    html: `<div style=\"transform: rotate(${newData.heading || 0}deg)\">\r\n                      <img src=\"${planeIcon}\" alt=\"plane\" style=\"width: 24px; height: 24px;\" />\r\n                    </div>`,\r\n                    className: '',\r\n                    iconSize: [24, 24],\r\n                    iconAnchor: [12, 12]\r\n                  }));\r\n                }\r\n                if (accuracyCircleRef.current) {\r\n                  accuracyCircleRef.current.setLatLng(latLng);\r\n                  accuracyCircleRef.current.setRadius(newData.gpsAccuracy || 0);\r\n                }\r\n              }\r\n            }\r\n          },\r\n          {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0,\r\n          }\r\n        );\r\n      } catch (err) {\r\n        setError('Failed to start GPS tracking');\r\n        console.error('GPS Error:', err);\r\n      }\r\n    };\r\n\r\n    startTracking();\r\n\r\n    return () => {\r\n      if (watchId.current !== null) {\r\n        navigator.geolocation.clearWatch(watchId.current);\r\n      }\r\n      if (mapRef.current) {\r\n        mapRef.current.remove();\r\n        mapRef.current = null;\r\n      }\r\n    };\r\n  }, [isDarkMode]);\r\n\r\n  return (\r\n    <div className={`p-4 ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>\r\n      <h2 className=\"text-2xl font-bold mb-4\">In-Flight Tracker</h2>\r\n      \r\n      {!isGpsAvailable && (\r\n        <div className={`p-4 rounded-lg mb-4 ${isDarkMode ? 'bg-red-900 text-red-200' : 'bg-red-100 text-red-800'}`}>\r\n          GPS is not available on this device. This tool requires GPS functionality to work.\r\n        </div>\r\n      )}\r\n\r\n      {error && (\r\n        <div className={`p-4 rounded-lg mb-4 ${isDarkMode ? 'bg-yellow-900 text-yellow-200' : 'bg-yellow-100 text-yellow-800'}`}>\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n        <div className={`p-4 rounded-lg ${isDarkMode ? 'bg-gray-800' : 'bg-white'} shadow`}>\r\n          <h3 className=\"text-lg font-semibold mb-2\">Current Position</h3>\r\n          <div className=\"space-y-2\">\r\n            <p>Latitude: {flightData.latitude?.toFixed(6) || 'N/A'}</p>\r\n            <p>Longitude: {flightData.longitude?.toFixed(6) || 'N/A'}</p>\r\n            <p>Altitude: {flightData.altitude ? `${Math.round(flightData.altitude)}m` : 'N/A'}</p>\r\n            <p>Speed: {flightData.speed ? `${Math.round(flightData.speed * 3.6)} km/h` : 'N/A'}</p>\r\n            <p>Heading: {flightData.heading ? `${Math.round(flightData.heading)}Â°` : 'N/A'}</p>\r\n            <p>GPS Accuracy: {flightData.gpsAccuracy ? `Â±${Math.round(flightData.gpsAccuracy)}m` : 'N/A'}</p>\r\n            <p>Last Update: {flightData.lastUpdate.toLocaleTimeString()}</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={`p-4 rounded-lg ${isDarkMode ? 'bg-gray-800' : 'bg-white'} shadow`}>\r\n          <h3 className=\"text-lg font-semibold mb-2\">Map View</h3>\r\n          <div id=\"map\" className=\"w-full h-64 rounded-lg\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InFlightTracker; ","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgPlaneIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"#ffff00\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M22,16v-2l-8.5-5V3.5C13.5,2.67,12.83,2,12,2s-1.5,0.67-1.5,1.5V9L2,14v2l8.5-2.5V19L8,20.5V22l4-1l4,1v-1.5L13.5,19 v-5.5L22,16z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPlaneIcon);\nexport default __webpack_public_path__ + \"static/media/plane-icon.5312c99550d9e701054eea554971757c.svg\";\nexport { ForwardRef as ReactComponent };"],"names":["L","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","InFlightTracker","_flightData$latitude","_flightData$longitude","isDarkMode","useTheme","flightData","setFlightData","useState","latitude","longitude","altitude","speed","heading","lastUpdate","Date","gpsAccuracy","error","setError","isGpsAvailable","setIsGpsAvailable","mapRef","useRef","markerRef","accuracyCircleRef","watchId","lastKnownPosition","useEffect","current","setView","attribution","addTo","navigator","geolocation","async","watchPosition","position","newData","coords","accuracy","latLng","setLatLng","setIcon","html","planeIcon","className","iconSize","iconAnchor","icon","setRadius","radius","color","fillColor","fillOpacity","weight","getZoom","console","warn","message","enableHighAccuracy","timeout","maximumAge","err","startTracking","clearWatch","remove","_jsxs","children","_jsx","toFixed","Math","round","toLocaleTimeString","id"],"sourceRoot":""}