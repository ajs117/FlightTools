{"version":3,"file":"static/js/395.3c3f0f44.chunk.js","mappings":"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","sources":["components/FlightCalculator.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { Search, Loader } from 'lucide-react';\r\nimport { MapContainer, TileLayer, Marker, Polyline, useMap } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport airportTimezone from 'airport-timezone';\r\nimport { Slider } from '@mui/material';\r\n// @ts-ignore\r\nimport terminator from \"@joergdietrich/leaflet.terminator\";\r\nimport planeIcon from '../plane-icon.svg';\r\nimport { useTheme } from '../context/ThemeContext';\r\nconst airportData = require('aircodes');\r\n\r\n// Fix for default markers\r\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\ninterface Waypoint {\r\n  lat: number;\r\n  lon: number;\r\n  ident: string;\r\n}\r\n\r\ninterface AirportTimezone {\r\n  code: string;\r\n  timezone: string;\r\n  offset: {\r\n    gmt: number;\r\n    dst: number;\r\n  };\r\n}\r\n\r\ninterface FlightPlan {\r\n  id: string;\r\n  fromICAO: string;\r\n  toICAO: string;\r\n  fromName: string;\r\n  toName: string;\r\n  distance: number;\r\n  route: {\r\n    nodes: Waypoint[];\r\n  };\r\n  departureTime?: string;\r\n  arrivalTime?: string;\r\n  duration?: string;\r\n}\r\n\r\ninterface RouteProgress {\r\n  position: [number, number];\r\n  currentTime: Date;\r\n  percentage: number;\r\n}\r\n\r\ninterface CachedRoutePosition {\r\n  position: [number, number];\r\n  currentTime: Date;\r\n  percentage: number;\r\n  timeString: string;\r\n}\r\n\r\n// Map component to set bounds\r\nconst SetBoundsToRoute = ({ waypoints }: { waypoints: Waypoint[] }) => {\r\n  const map = useMap();\r\n  \r\n  useEffect(() => {\r\n    if (waypoints.length < 2) return;\r\n    \r\n    const latLngs = waypoints.map(w => L.latLng(w.lat, w.lon));\r\n    const bounds = L.latLngBounds(latLngs);\r\n    \r\n    // Add padding around the bounds\r\n    map.fitBounds(bounds, { padding: [50, 50] });\r\n  }, [waypoints, map]);\r\n  \r\n  return null;\r\n};\r\n\r\nconst findClosestPosition = (positions: CachedRoutePosition[], target: number): CachedRoutePosition | null => {\r\n  if (!positions.length) return null;\r\n  \r\n  let low = 0;\r\n  let high = positions.length - 1;\r\n  \r\n  // Handle edge cases\r\n  if (target <= positions[0].percentage) return positions[0];\r\n  if (target >= positions[high].percentage) return positions[high];\r\n  \r\n  while (low <= high) {\r\n    const mid = Math.floor((low + high) / 2);\r\n    if (positions[mid].percentage === target) {\r\n      return positions[mid];\r\n    }\r\n    if (positions[mid].percentage < target) {\r\n      low = mid + 1;\r\n    } else {\r\n      high = mid - 1;\r\n    }\r\n  }\r\n  \r\n  // Return the closest position\r\n  return (low < positions.length && high >= 0) \r\n    ? (Math.abs(positions[low].percentage - target) < Math.abs(positions[high].percentage - target) \r\n       ? positions[low] : positions[high])\r\n    : null;\r\n};\r\n\r\ninterface DayNightTerminatorProps {\r\n  currentTime?: Date;\r\n}\r\n\r\nconst DayNightTerminator = ({ currentTime }: DayNightTerminatorProps) => {\r\n  const map = useMap();\r\n  const terminatorRef = useRef<any>(null);\r\n  \r\n  useEffect(() => {\r\n    terminatorRef.current = terminator().addTo(map);\r\n\r\n    return () => {\r\n      if (terminatorRef.current) {\r\n        map.removeLayer(terminatorRef.current);\r\n      }\r\n    };\r\n  }, [map]);\r\n\r\n  useEffect(() => {\r\n    if (terminatorRef.current && currentTime) {\r\n      terminatorRef.current.setTime(currentTime);\r\n    }\r\n  }, [currentTime]);\r\n\r\n  return null;\r\n};\r\n\r\nconst calculateBearing = (start: [number, number], end: [number, number]): number => {\r\n  const startLat = start[0] * Math.PI / 180;\r\n  const startLng = start[1] * Math.PI / 180;\r\n  const endLat = end[0] * Math.PI / 180;\r\n  const endLng = end[1] * Math.PI / 180;\r\n\r\n  const dLng = endLng - startLng;\r\n\r\n  const y = Math.sin(dLng) * Math.cos(endLat);\r\n  const x = Math.cos(startLat) * Math.sin(endLat) -\r\n            Math.sin(startLat) * Math.cos(endLat) * Math.cos(dLng);\r\n\r\n  let bearing = Math.atan2(y, x) * 180 / Math.PI;\r\n  if (bearing < 0) {\r\n    bearing += 360;\r\n  }\r\n  return bearing;\r\n};\r\n\r\nconst isDST = (date: Date): boolean => {\r\n  const year = date.getFullYear();\r\n  const march = new Date(year, 2, 31); // March 31\r\n  const october = new Date(year, 9, 31); // October 31\r\n  \r\n  // Find last Sunday of March\r\n  const lastSundayMarch = new Date(march);\r\n  lastSundayMarch.setDate(31 - ((march.getDay() + 1) % 7));\r\n  \r\n  // Find last Sunday of October\r\n  const lastSundayOctober = new Date(october);\r\n  lastSundayOctober.setDate(31 - ((october.getDay() + 1) % 7));\r\n  \r\n  return date >= lastSundayMarch && date < lastSundayOctober;\r\n};\r\n\r\nconst FlightCalculator: React.FC = () => {\r\n  const { isDarkMode } = useTheme();\r\n  const [departure, setDeparture] = useState(() => {\r\n    return localStorage.getItem('calcDeparture') || '';\r\n  });\r\n  const [arrival, setArrival] = useState(() => {\r\n    return localStorage.getItem('calcArrival') || '';\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [flightPlans, setFlightPlans] = useState<FlightPlan[]>([]);\r\n  const [departureTime, setDepartureTime] = useState(() => {\r\n    return localStorage.getItem('calcDepartureTime') || '';\r\n  });\r\n  const [arrivalTime, setArrivalTime] = useState(() => {\r\n    return localStorage.getItem('calcArrivalTime') || '';\r\n  });\r\n  const [routeProgress, setRouteProgress] = useState<RouteProgress | null>(null);\r\n  const [sliderValue, setSliderValue] = useState<number>(0);\r\n  const [cachedPositions, setCachedPositions] = useState<CachedRoutePosition[]>([]);\r\n\r\n  // Save values to localStorage when they change\r\n  useEffect(() => {\r\n    if (departure) {\r\n      localStorage.setItem('calcDeparture', departure);\r\n    } else {\r\n      localStorage.removeItem('calcDeparture');\r\n    }\r\n  }, [departure]);\r\n\r\n  useEffect(() => {\r\n    if (arrival) {\r\n      localStorage.setItem('calcArrival', arrival);\r\n    } else {\r\n      localStorage.removeItem('calcArrival');\r\n    }\r\n  }, [arrival]);\r\n\r\n  useEffect(() => {\r\n    if (departureTime) {\r\n      localStorage.setItem('calcDepartureTime', departureTime);\r\n    } else {\r\n      localStorage.removeItem('calcDepartureTime');\r\n    }\r\n  }, [departureTime]);\r\n\r\n  useEffect(() => {\r\n    if (arrivalTime) {\r\n      localStorage.setItem('calcArrivalTime', arrivalTime);\r\n    } else {\r\n      localStorage.removeItem('calcArrivalTime');\r\n    }\r\n  }, [arrivalTime]);\r\n\r\n  // Handle departure time changes\r\n  const handleDepartureTimeChange = (time: string) => {\r\n    setDepartureTime(time);\r\n    // If arrival time is before departure time or not set, update it\r\n    if (!arrivalTime || new Date(arrivalTime) <= new Date(time)) {\r\n      const newArrivalTime = new Date(time);\r\n      newArrivalTime.setHours(newArrivalTime.getHours() + 1); // Add 1 hour by default\r\n      setArrivalTime(newArrivalTime.toISOString().slice(0, 16));\r\n    }\r\n  };\r\n\r\n  const getAirportTimezone = useCallback((icao: string): AirportTimezone | null => {\r\n    try {\r\n      const airport = airportData.getAirportByIcao(icao);\r\n      if (!airport?.iata) return null;\r\n      \r\n      const tzAirport = airportTimezone.filter((apt: AirportTimezone) => \r\n        apt.code === airport.iata\r\n      )[0];\r\n      \r\n      return tzAirport || null;\r\n    } catch (err) {\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  const calculateDuration = useCallback((depTime: string, arrTime: string, depICAO: string, arrICAO: string): string => {\r\n    const depAirport = getAirportTimezone(depICAO);\r\n    const arrAirport = getAirportTimezone(arrICAO);\r\n\r\n    if (!depAirport || !arrAirport) {\r\n      return 'Unknown duration';\r\n    }\r\n\r\n    const depDate = new Date(depTime);\r\n    const arrDate = new Date(arrTime);\r\n\r\n    // Convert to UTC considering timezone offsets\r\n    const depUTC = new Date(depDate.getTime() - (depAirport.offset.dst * 3600000));\r\n    const arrUTC = new Date(arrDate.getTime() - (arrAirport.offset.dst * 3600000));\r\n\r\n    const durationMs = arrUTC.getTime() - depUTC.getTime();\r\n    const hours = Math.floor(durationMs / (1000 * 60 * 60));\r\n    const minutes = Math.round((durationMs % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n    return `${hours}h ${minutes}m`;\r\n  }, [getAirportTimezone]);\r\n\r\n  const searchFlightPlans = async () => {\r\n    if (!departure || !arrival) {\r\n      setError('Please enter both departure and arrival');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      // First get the list of plans\r\n      const searchResponse = await fetch(\r\n        `https://api.flightplandatabase.com/search/plans?fromICAO=${departure}&toICAO=${arrival}`,\r\n        {\r\n          headers: {\r\n            'Accept': 'application/json'\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!searchResponse.ok) {\r\n        throw new Error('Failed to fetch flight plans');\r\n      }\r\n\r\n      const plans = await searchResponse.json();\r\n      if (plans.length === 0) {\r\n        setError('No flight plans found');\r\n        setFlightPlans([]);\r\n        setCachedPositions([]);\r\n        return;\r\n      }\r\n\r\n      // Get the latest plan details\r\n      const latestPlan = plans[0];\r\n      const planResponse = await fetch(\r\n        `https://api.flightplandatabase.com/plan/${latestPlan.id}`,\r\n        {\r\n          headers: {\r\n            'Accept': 'application/json'\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!planResponse.ok) {\r\n        throw new Error('Failed to fetch flight plan details');\r\n      }\r\n\r\n      const planDetails: FlightPlan = await planResponse.json();\r\n      // Ensure waypoints is always an array\r\n      planDetails.route.nodes = planDetails.route.nodes || [];\r\n      if (departureTime && arrivalTime) {\r\n        planDetails.duration = calculateDuration(\r\n          departureTime,\r\n          arrivalTime,\r\n          planDetails.fromICAO,\r\n          planDetails.toICAO\r\n        );\r\n      }\r\n      setFlightPlans([planDetails]);\r\n      calculateRoutePositions(planDetails, departureTime);\r\n    } catch (err) {\r\n      setError('Error fetching flight plans: ' + (err instanceof Error ? err.message : 'Unknown error'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const calculateRoutePosition = useCallback((\r\n    waypoints: Waypoint[],\r\n    percentage: number,\r\n    depTime: string,\r\n    duration: string\r\n  ): RouteProgress => {\r\n    if (waypoints.length < 2) return {\r\n      position: [0, 0],\r\n      currentTime: new Date(depTime),\r\n      percentage: 0\r\n    };\r\n  \r\n    // Add 10 minutes for taxi at each end\r\n    const taxiTime = 10 * 60 * 1000; // 10 minutes in milliseconds\r\n    const [hours, minutes] = duration.split('h ').map(part => \r\n      parseInt(part.replace('m', ''))\r\n    );\r\n    const totalDurationMs = (hours * 3600000) + (minutes * 60000);\r\n    const flightDurationMs = totalDurationMs - (taxiTime * 2);\r\n    \r\n    // Calculate the adjusted progress percentage for actual route position\r\n    let adjustedPercentage = percentage;\r\n    \r\n    // Calculate taxi time percentages based on actual taxi time\r\n    const taxiPercentage = (taxiTime / totalDurationMs) * 100;\r\n    \r\n    if (percentage <= taxiPercentage) {\r\n      // Initial taxi phase - position stays at first waypoint\r\n      adjustedPercentage = 0;\r\n    } else if (percentage >= (100 - taxiPercentage)) {\r\n      // Final taxi phase - position stays at last waypoint\r\n      adjustedPercentage = 100;\r\n    } else {\r\n      // Flight phase - rescale percentage to account for taxi time\r\n      const flightRange = 100 - (2 * taxiPercentage);\r\n      adjustedPercentage = ((percentage - taxiPercentage) / flightRange) * 100;\r\n    }\r\n    \r\n    // Calculate position along route based on adjusted percentage\r\n    const totalSegments = waypoints.length - 1;\r\n    const segmentPercentage = (adjustedPercentage * totalSegments) / 100;\r\n    const currentSegment = Math.floor(segmentPercentage);\r\n    const segmentProgress = segmentPercentage - currentSegment;\r\n  \r\n    // Get the position\r\n    let position;\r\n    if (adjustedPercentage >= 100) {\r\n      position = [waypoints[totalSegments].lat, waypoints[totalSegments].lon] as [number, number];\r\n    } else if (adjustedPercentage <= 0) {\r\n      position = [waypoints[0].lat, waypoints[0].lon] as [number, number];\r\n    } else {\r\n      const start = waypoints[currentSegment];\r\n      const end = waypoints[currentSegment + 1];\r\n      \r\n      const lat = start.lat + (end.lat - start.lat) * segmentProgress;\r\n      const lon = start.lon + (end.lon - start.lon) * segmentProgress;\r\n      position = [lat, lon] as [number, number];\r\n    }\r\n    \r\n    // Calculate current time based on original percentage (including taxi time)\r\n    const startTime = new Date(depTime);\r\n    const elapsedMs = (totalDurationMs * percentage) / 100;\r\n    const currentTime = new Date(startTime.getTime() + elapsedMs);\r\n  \r\n    return {\r\n      position,\r\n      currentTime,\r\n      percentage\r\n    };\r\n  }, []);\r\n  \r\n  const calculateRoutePositions = useCallback((\r\n    plan: FlightPlan,\r\n    depTime: string\r\n  ) => {\r\n    if (!plan.duration || !plan.route.nodes.length) {\r\n      setCachedPositions([]);\r\n      return;\r\n    }\r\n  \r\n    const positions: CachedRoutePosition[] = [];\r\n    // Create more granular positions for smoother slider\r\n    const INTERVAL = 5 * 60 * 1000; // 5 minutes in milliseconds (more granular)\r\n    const [hours, minutes] = plan.duration.split('h ').map(part => \r\n      parseInt(part.replace('m', ''))\r\n    );\r\n    \r\n    const totalDurationMs = (hours * 3600000) + (minutes * 60000) + (20 * 60 * 1000); // Including taxi time\r\n    const steps = Math.ceil(totalDurationMs / INTERVAL);\r\n  \r\n    for (let i = 0; i <= steps; i++) {\r\n      const percentage = (i * INTERVAL * 100) / totalDurationMs;\r\n      if (percentage > 100) break;\r\n  \r\n      const progress = calculateRoutePosition(\r\n        plan.route.nodes,\r\n        percentage,\r\n        depTime,\r\n        plan.duration\r\n      );\r\n  \r\n      positions.push({\r\n        ...progress,\r\n        timeString: progress.currentTime.toLocaleTimeString()\r\n      });\r\n    }\r\n  \r\n    setCachedPositions(positions);\r\n    // Initialize the slider to 0%\r\n    setSliderValue(0);\r\n    setRouteProgress(positions[0] || null);\r\n  }, [calculateRoutePosition]);\r\n  \r\n  const handleSliderChange = useCallback((\r\n    event: Event,\r\n    value: number | number[]\r\n  ) => {\r\n    const percentage = typeof value === 'number' ? value : value[0];\r\n    setSliderValue(percentage);\r\n    \r\n    if (cachedPositions.length === 0) return;\r\n    \r\n    // Use the cached positions directly\r\n    const position = findClosestPosition(cachedPositions, percentage);\r\n    if (position) {\r\n      setRouteProgress({\r\n        position: position.position,\r\n        currentTime: position.currentTime,\r\n        percentage\r\n      });\r\n    }\r\n  }, [cachedPositions]);\r\n\r\n  // Clear stored fields\r\n  const clearStoredFields = () => {\r\n    // Clear state\r\n    setDeparture('');\r\n    setArrival('');\r\n    setDepartureTime('');\r\n    setArrivalTime('');\r\n    setFlightPlans([]);\r\n    setRouteProgress(null);\r\n    setSliderValue(0);\r\n    setCachedPositions([]);\r\n    setError('');\r\n    \r\n    // Clear localStorage\r\n    localStorage.removeItem('calcDeparture');\r\n    localStorage.removeItem('calcArrival');\r\n    localStorage.removeItem('calcDepartureTime');\r\n    localStorage.removeItem('calcArrivalTime');\r\n  };\r\n\r\n  // When departure or arrival time changes, recalculate\r\n  useEffect(() => {\r\n    if (flightPlans.length > 0 && departureTime && arrivalTime) {\r\n      const plan = flightPlans[0];\r\n      plan.duration = calculateDuration(\r\n        departureTime,\r\n        arrivalTime,\r\n        plan.fromICAO,\r\n        plan.toICAO\r\n      );\r\n      calculateRoutePositions(plan, departureTime);\r\n    }\r\n  }, [departureTime, arrivalTime, flightPlans, calculateDuration, calculateRoutePositions]);\r\n\r\n  return (\r\n      <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow p-3 sm:p-6 h-full mx-auto`}>\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-3 sm:gap-6 h-full\">\r\n          {/* Input section */}\r\n          <div className=\"lg:col-span-1 space-y-3 sm:space-y-4\">\r\n            <div>\r\n              <label className={`block text-xs sm:text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>\r\n                Departure (ICAO/Name)\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={departure}\r\n                onChange={(e) => setDeparture(e.target.value.toUpperCase())}\r\n                className={`w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  isDarkMode ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900'\r\n                }`}\r\n                placeholder=\"EGLL\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className={`block text-xs sm:text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>\r\n                Departure Time\r\n              </label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                value={departureTime}\r\n                onChange={(e) => handleDepartureTimeChange(e.target.value)}\r\n                className={`w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  isDarkMode ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900'\r\n                }`}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className={`block text-xs sm:text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>\r\n                Arrival (ICAO/Name)\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={arrival}\r\n                onChange={(e) => setArrival(e.target.value.toUpperCase())}\r\n                className={`w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  isDarkMode ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900'\r\n                }`}\r\n                placeholder=\"KJFK\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className={`block text-xs sm:text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>\r\n                Arrival Time\r\n              </label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                value={arrivalTime}\r\n                onChange={(e) => setArrivalTime(e.target.value)}\r\n                className={`w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  isDarkMode ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900'\r\n                }`}\r\n              />\r\n            </div>\r\n            <button\r\n              onClick={searchFlightPlans}\r\n              disabled={loading || !departure || !arrival}\r\n              className=\"w-full bg-blue-600 text-white p-2 sm:p-3 rounded hover:bg-blue-700 disabled:bg-blue-300 flex items-center justify-center gap-2 text-sm sm:text-base\"\r\n            >\r\n              {loading ? (\r\n                <>\r\n                  <Loader className=\"animate-spin\" size={16} />\r\n                  Searching...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Search size={16} />\r\n                  Search Flight Plans\r\n                </>\r\n              )}\r\n            </button>\r\n            \r\n            <button\r\n              onClick={clearStoredFields}\r\n              className=\"w-full bg-red-600 text-white p-2 sm:p-3 rounded hover:bg-red-700 flex items-center justify-center gap-2 text-sm sm:text-base\"\r\n            >\r\n              Clear All Fields\r\n            </button>\r\n          </div>\r\n\r\n          {/* Map and details section */}\r\n          <div className=\"lg:col-span-3 space-y-3 sm:space-y-4\">\r\n            {error && (\r\n              <div className={`p-2 sm:p-3 rounded text-sm sm:text-base ${\r\n                isDarkMode ? 'bg-red-900 text-red-100' : 'bg-red-100 text-red-700'\r\n              }`}>\r\n                {error}\r\n              </div>\r\n            )}\r\n            \r\n            {/* Map container */}\r\n            <div className={`h-[50vh] md:h-[calc(100vh-350px)] rounded border ${\r\n              isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'\r\n            }`}>\r\n              <MapContainer\r\n                style={{ height: '100%', width: '100%' }}\r\n                center={[51.505, -0.09]}\r\n                zoom={2}\r\n                scrollWheelZoom={true}\r\n              >\r\n                <TileLayer\r\n                  attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                  url={isDarkMode \r\n                    ? \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\"\r\n                    : \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                  }\r\n                />\r\n                <DayNightTerminator currentTime={routeProgress?.currentTime ? (() => {\r\n                  const depAirport = getAirportTimezone(flightPlans[0]?.fromICAO || '');\r\n                  if (!depAirport) return routeProgress.currentTime;\r\n                  const offset = isDST(routeProgress.currentTime) ? depAirport.offset.dst : depAirport.offset.gmt;\r\n                  return new Date(routeProgress.currentTime.getTime() - (offset * 3600000));\r\n                })() : undefined} />\r\n                {flightPlans.map((plan) => (\r\n                  <React.Fragment key={plan.id}>\r\n                    <Polyline\r\n                      positions={plan.route.nodes.map(w => [w.lat, w.lon])}\r\n                      color=\"red\"\r\n                    />\r\n                    {routeProgress && (\r\n                      <Marker\r\n                        position={routeProgress.position}\r\n                        icon={L.divIcon({\r\n                          html: `<div style=\"transform: rotate(${(() => {\r\n                            const currentIdx = Math.floor((routeProgress.percentage * (plan.route.nodes.length - 1)) / 100);\r\n                            const nextIdx = Math.min(currentIdx + 1, plan.route.nodes.length - 1);\r\n                            const start: [number, number] = [plan.route.nodes[currentIdx].lat, plan.route.nodes[currentIdx].lon];\r\n                            const end: [number, number] = [plan.route.nodes[nextIdx].lat, plan.route.nodes[nextIdx].lon];\r\n                            return calculateBearing(start, end);\r\n                          })()}deg)\">\r\n                            <img src=\"${planeIcon}\" alt=\"plane\" style=\"width: 24px; height: 24px;\" />\r\n                          </div>`,\r\n                          className: '',\r\n                          iconSize: [24, 24],\r\n                          iconAnchor: [12, 12]\r\n                        })}\r\n                      />\r\n                    )}\r\n                    {plan.route.nodes.length > 0 && (\r\n                      <SetBoundsToRoute waypoints={plan.route.nodes} />\r\n                    )}\r\n                  </React.Fragment>\r\n                ))}\r\n              </MapContainer>\r\n            </div>\r\n\r\n            {/* Flight plan details */}\r\n            {flightPlans.length > 0 && (\r\n              <div className={`${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'} p-3 sm:p-4 rounded border text-sm sm:text-base`}>\r\n                <h2 className={`text-lg sm:text-xl font-semibold mb-2 sm:mb-4 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\r\n                  Flight Plan Details\r\n                </h2>\r\n                <div className=\"space-y-3 sm:space-y-4\">\r\n                  {flightPlans.map((plan) => (\r\n                    <div key={plan.id}>\r\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-4 mb-2 sm:mb-4\">\r\n                        <div>\r\n                          <div className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\r\n                            {plan.fromICAO} → {plan.toICAO}\r\n                          </div>\r\n                          <div className={`text-xs sm:text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\r\n                            {plan.fromName} → {plan.toName}\r\n                          </div>\r\n                          {plan.duration && (\r\n                            <div className=\"text-xs sm:text-sm font-medium text-blue-400\">\r\n                              Duration: {plan.duration}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"text-right\">\r\n                          <div className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\r\n                            {Math.round(plan.distance)} nm\r\n                          </div>\r\n                          {departureTime && (\r\n                            <div className={`text-xs sm:text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\r\n                              Departure: {new Date(departureTime).toLocaleString()} - \r\n                              {getAirportTimezone(plan.fromICAO)?.timezone}\r\n                            </div>\r\n                          )}\r\n                          {arrivalTime && (\r\n                            <div className={`text-xs sm:text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\r\n                              Arrival: {new Date(arrivalTime).toLocaleString()} - \r\n                              {getAirportTimezone(plan.toICAO)?.timezone}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div>\r\n                        <div className=\"flex items-center justify-between mb-1 sm:mb-2\">\r\n                          <span className={`text-xs sm:text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\r\n                            {routeProgress?.currentTime.toLocaleTimeString() || 'Route Progress'}\r\n                          </span>\r\n                          {routeProgress && (\r\n                            <span className={`text-xs sm:text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\r\n                              {Math.round(routeProgress.percentage)}%\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"relative\">\r\n                          <Slider\r\n                            value={sliderValue}\r\n                            onChange={handleSliderChange}\r\n                            aria-labelledby=\"route-progress-slider\"\r\n                            min={0}\r\n                            max={100}\r\n                            step={0.1}\r\n                            disabled={!departureTime || !cachedPositions.length}\r\n                            sx={{\r\n                              '& .MuiSlider-thumb': {\r\n                                transition: 'none',\r\n                                backgroundColor: isDarkMode ? '#fff' : '#1976d2',\r\n                                '&:hover, &.Mui-focusVisible': {\r\n                                  backgroundColor: isDarkMode ? '#e0e0e0' : '#1565c0',\r\n                                },\r\n                              },\r\n                              '& .MuiSlider-track': {\r\n                                transition: 'none',\r\n                                backgroundColor: isDarkMode ? '#fff' : '#1976d2',\r\n                              },\r\n                              '& .MuiSlider-rail': {\r\n                                backgroundColor: isDarkMode ? '#4b5563' : '#e5e7eb',\r\n                              },\r\n                            }}\r\n                          />\r\n                          <div className=\"relative group\">\r\n                            {cachedPositions.filter((_, idx) => idx % 3 === 0).map((pos, idx) => (\r\n                              <div\r\n                                key={idx}\r\n                                className=\"absolute -translate-x-1/2 text-xs text-gray-400\"\r\n                                style={{ left: `${pos.percentage}%` }}\r\n                              >\r\n                                |\r\n                                <span className=\"hidden group-hover:block absolute -translate-x-1/2 whitespace-nowrap text-[10px] sm:text-xs\">\r\n                                  {pos.timeString}\r\n                                </span>\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                        {routeProgress && (\r\n                          <div className={`text-xs sm:text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} mt-4 sm:mt-4`}>\r\n                            Current Position: {routeProgress.position[0].toFixed(2)}, {routeProgress.position[1].toFixed(2)}\r\n                            <br />\r\n                            Current Time (UTC): {(() => {\r\n                              const depAirport = getAirportTimezone(flightPlans[0]?.fromICAO || '');\r\n                              if (!depAirport) return routeProgress.currentTime.toLocaleString() + ' UTC';\r\n                              const offset = isDST(routeProgress.currentTime) ? depAirport.offset.dst : depAirport.offset.gmt;\r\n                              const utcTime = new Date(routeProgress.currentTime.getTime() - (offset * 3600000));\r\n                              return utcTime.toLocaleString() + ' UTC';\r\n                            })()}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default FlightCalculator;"],"names":["airportData","require","L","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","SetBoundsToRoute","_ref","waypoints","map","useMap","useEffect","length","latLngs","w","lat","lon","bounds","fitBounds","padding","DayNightTerminator","_ref2","currentTime","terminatorRef","useRef","current","terminator","addTo","removeLayer","setTime","isDST","date","year","getFullYear","march","Date","october","lastSundayMarch","setDate","getDay","lastSundayOctober","FlightCalculator","isDarkMode","useTheme","departure","setDeparture","useState","localStorage","getItem","arrival","setArrival","loading","setLoading","error","setError","flightPlans","setFlightPlans","departureTime","setDepartureTime","arrivalTime","setArrivalTime","routeProgress","setRouteProgress","sliderValue","setSliderValue","cachedPositions","setCachedPositions","setItem","removeItem","getAirportTimezone","useCallback","icao","airport","getAirportByIcao","iata","airportTimezone","filter","apt","code","err","calculateDuration","depTime","arrTime","depICAO","arrICAO","depAirport","arrAirport","depDate","arrDate","depUTC","getTime","offset","dst","durationMs","Math","floor","round","calculateRoutePosition","percentage","duration","position","taxiTime","hours","minutes","split","part","parseInt","replace","totalDurationMs","adjustedPercentage","taxiPercentage","totalSegments","segmentPercentage","currentSegment","segmentProgress","start","end","startTime","elapsedMs","calculateRoutePositions","plan","route","nodes","positions","INTERVAL","steps","ceil","i","progress","push","timeString","toLocaleTimeString","handleSliderChange","event","value","findClosestPosition","target","low","high","mid","abs","fromICAO","toICAO","_jsx","className","children","_jsxs","type","onChange","e","toUpperCase","placeholder","time","newArrivalTime","setHours","getHours","toISOString","slice","handleDepartureTimeChange","onClick","async","searchResponse","fetch","headers","ok","Error","plans","json","latestPlan","planResponse","id","planDetails","message","disabled","_Fragment","Loader","size","Search","clearStoredFields","MapContainer","style","height","width","center","zoom","scrollWheelZoom","TileLayer","attribution","url","_flightPlans$","gmt","undefined","React","Polyline","color","Marker","icon","html","currentIdx","nextIdx","min","calculateBearing","startLat","PI","startLng","endLat","dLng","y","sin","cos","x","bearing","atan2","planeIcon","iconSize","iconAnchor","_getAirportTimezone","_getAirportTimezone2","fromName","toName","distance","toLocaleString","timezone","Slider","max","step","sx","transition","backgroundColor","_","idx","pos","left","toFixed","_flightPlans$2"],"sourceRoot":""}