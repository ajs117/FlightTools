{"version":3,"file":"static/js/52.798b1aa6.chunk.js","mappings":"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","sources":["components/FlightCalculator.tsx","plane-icon.svg"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { Search, Loader } from 'lucide-react';\r\nimport { MapContainer, TileLayer, Marker, Polyline, useMap } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport airportTimezone from 'airport-timezone';\r\nimport { Slider } from '@mui/material';\r\n// @ts-ignore\r\nimport terminator from \"@joergdietrich/leaflet.terminator\";\r\nimport planeIcon from '../plane-icon.svg';\r\nimport { useTheme } from '../context/ThemeContext';\r\nconst airportData = require('aircodes');\r\n\r\n// Fix for default markers\r\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\ninterface Waypoint {\r\n  lat: number;\r\n  lon: number;\r\n  ident: string;\r\n}\r\n\r\ninterface AirportTimezone {\r\n  code: string;\r\n  timezone: string;\r\n  offset: {\r\n    gmt: number;\r\n    dst: number;\r\n  };\r\n}\r\n\r\ninterface FlightPlan {\r\n  id: string;\r\n  fromICAO: string;\r\n  toICAO: string;\r\n  fromName: string;\r\n  toName: string;\r\n  distance: number;\r\n  route: {\r\n    nodes: Waypoint[];\r\n  };\r\n  departureTime?: string;\r\n  arrivalTime?: string;\r\n  duration?: string;\r\n}\r\n\r\ninterface RouteProgress {\r\n  position: [number, number];\r\n  currentTime: Date;\r\n  percentage: number;\r\n}\r\n\r\ninterface CachedRoutePosition {\r\n  position: [number, number];\r\n  currentTime: Date;\r\n  percentage: number;\r\n  timeString: string;\r\n}\r\n\r\n// Map component to set bounds\r\nconst SetBoundsToRoute = ({ waypoints }: { waypoints: Waypoint[] }) => {\r\n  const map = useMap();\r\n  \r\n  useEffect(() => {\r\n    if (waypoints.length < 2) return;\r\n    \r\n    const latLngs = waypoints.map(w => L.latLng(w.lat, w.lon));\r\n    const bounds = L.latLngBounds(latLngs);\r\n    \r\n    // Add padding around the bounds\r\n    map.fitBounds(bounds, { padding: [50, 50] });\r\n  }, [waypoints, map]);\r\n  \r\n  return null;\r\n};\r\n\r\nconst findClosestPosition = (positions: CachedRoutePosition[], target: number): CachedRoutePosition | null => {\r\n  if (!positions.length) return null;\r\n  \r\n  let low = 0;\r\n  let high = positions.length - 1;\r\n  \r\n  // Handle edge cases\r\n  if (target <= positions[0].percentage) return positions[0];\r\n  if (target >= positions[high].percentage) return positions[high];\r\n  \r\n  while (low <= high) {\r\n    const mid = Math.floor((low + high) / 2);\r\n    if (positions[mid].percentage === target) {\r\n      return positions[mid];\r\n    }\r\n    if (positions[mid].percentage < target) {\r\n      low = mid + 1;\r\n    } else {\r\n      high = mid - 1;\r\n    }\r\n  }\r\n  \r\n  // Return the closest position\r\n  return (low < positions.length && high >= 0) \r\n    ? (Math.abs(positions[low].percentage - target) < Math.abs(positions[high].percentage - target) \r\n       ? positions[low] : positions[high])\r\n    : null;\r\n};\r\n\r\ninterface DayNightTerminatorProps {\r\n  currentTime?: Date;\r\n}\r\n\r\nconst DayNightTerminator = ({ currentTime }: DayNightTerminatorProps) => {\r\n  const map = useMap();\r\n  const terminatorRef = useRef<any>(null);\r\n  \r\n  useEffect(() => {\r\n    terminatorRef.current = terminator().addTo(map);\r\n\r\n    return () => {\r\n      if (terminatorRef.current) {\r\n        map.removeLayer(terminatorRef.current);\r\n      }\r\n    };\r\n  }, [map]);\r\n\r\n  useEffect(() => {\r\n    if (terminatorRef.current && currentTime) {\r\n      terminatorRef.current.setTime(currentTime);\r\n    }\r\n  }, [currentTime]);\r\n\r\n  return null;\r\n};\r\n\r\nconst calculateBearing = (start: [number, number], end: [number, number]): number => {\r\n  const startLat = start[0] * Math.PI / 180;\r\n  const startLng = start[1] * Math.PI / 180;\r\n  const endLat = end[0] * Math.PI / 180;\r\n  const endLng = end[1] * Math.PI / 180;\r\n\r\n  const dLng = endLng - startLng;\r\n\r\n  const y = Math.sin(dLng) * Math.cos(endLat);\r\n  const x = Math.cos(startLat) * Math.sin(endLat) -\r\n            Math.sin(startLat) * Math.cos(endLat) * Math.cos(dLng);\r\n\r\n  let bearing = Math.atan2(y, x) * 180 / Math.PI;\r\n  if (bearing < 0) {\r\n    bearing += 360;\r\n  }\r\n  return bearing;\r\n};\r\n\r\nconst FlightCalculator: React.FC = () => {\r\n  const { isDarkMode } = useTheme();\r\n  const [departure, setDeparture] = useState('');\r\n  const [arrival, setArrival] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [flightPlans, setFlightPlans] = useState<FlightPlan[]>([]);\r\n  const [departureTime, setDepartureTime] = useState('');\r\n  const [arrivalTime, setArrivalTime] = useState('');\r\n  const [routeProgress, setRouteProgress] = useState<RouteProgress | null>(null);\r\n  const [sliderValue, setSliderValue] = useState<number>(0);\r\n  const [cachedPositions, setCachedPositions] = useState<CachedRoutePosition[]>([]);\r\n\r\n  // Handle departure time changes\r\n  const handleDepartureTimeChange = (time: string) => {\r\n    setDepartureTime(time);\r\n    // If arrival time is before departure time or not set, update it\r\n    if (!arrivalTime || new Date(arrivalTime) <= new Date(time)) {\r\n      const newArrivalTime = new Date(time);\r\n      newArrivalTime.setHours(newArrivalTime.getHours() + 1); // Add 1 hour by default\r\n      setArrivalTime(newArrivalTime.toISOString().slice(0, 16));\r\n    }\r\n  };\r\n\r\n  const getAirportTimezone = useCallback((icao: string): AirportTimezone | null => {\r\n    try {\r\n      const airport = airportData.getAirportByIcao(icao);\r\n      if (!airport?.iata) return null;\r\n      \r\n      const tzAirport = airportTimezone.filter((apt: AirportTimezone) => \r\n        apt.code === airport.iata\r\n      )[0];\r\n      \r\n      return tzAirport || null;\r\n    } catch (err) {\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  const calculateDuration = useCallback((depTime: string, arrTime: string, depICAO: string, arrICAO: string): string => {\r\n    const depAirport = getAirportTimezone(depICAO);\r\n    const arrAirport = getAirportTimezone(arrICAO);\r\n\r\n    if (!depAirport || !arrAirport) {\r\n      return 'Unknown duration';\r\n    }\r\n\r\n    const depDate = new Date(depTime);\r\n    const arrDate = new Date(arrTime);\r\n\r\n    // Convert to UTC considering timezone offsets\r\n    const depUTC = new Date(depDate.getTime() - (depAirport.offset.dst * 3600000));\r\n    const arrUTC = new Date(arrDate.getTime() - (arrAirport.offset.dst * 3600000));\r\n\r\n    const durationMs = arrUTC.getTime() - depUTC.getTime();\r\n    const hours = Math.floor(durationMs / (1000 * 60 * 60));\r\n    const minutes = Math.round((durationMs % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n    return `${hours}h ${minutes}m`;\r\n  }, [getAirportTimezone]);\r\n\r\n  const searchFlightPlans = async () => {\r\n    if (!departure || !arrival) {\r\n      setError('Please enter both departure and arrival');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      // First get the list of plans\r\n      const searchResponse = await fetch(\r\n        `https://api.flightplandatabase.com/search/plans?fromICAO=${departure}&toICAO=${arrival}`,\r\n        {\r\n          headers: {\r\n            'Accept': 'application/json'\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!searchResponse.ok) {\r\n        throw new Error('Failed to fetch flight plans');\r\n      }\r\n\r\n      const plans = await searchResponse.json();\r\n      if (plans.length === 0) {\r\n        setError('No flight plans found');\r\n        setFlightPlans([]);\r\n        setCachedPositions([]);\r\n        return;\r\n      }\r\n\r\n      // Get the latest plan details\r\n      const latestPlan = plans[0];\r\n      const planResponse = await fetch(\r\n        `https://api.flightplandatabase.com/plan/${latestPlan.id}`,\r\n        {\r\n          headers: {\r\n            'Accept': 'application/json'\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!planResponse.ok) {\r\n        throw new Error('Failed to fetch flight plan details');\r\n      }\r\n\r\n      const planDetails: FlightPlan = await planResponse.json();\r\n      // Ensure waypoints is always an array\r\n      planDetails.route.nodes = planDetails.route.nodes || [];\r\n      if (departureTime && arrivalTime) {\r\n        planDetails.duration = calculateDuration(\r\n          departureTime,\r\n          arrivalTime,\r\n          planDetails.fromICAO,\r\n          planDetails.toICAO\r\n        );\r\n      }\r\n      setFlightPlans([planDetails]);\r\n      calculateRoutePositions(planDetails, departureTime);\r\n    } catch (err) {\r\n      setError('Error fetching flight plans: ' + (err instanceof Error ? err.message : 'Unknown error'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const calculateRoutePosition = useCallback((\r\n    waypoints: Waypoint[],\r\n    percentage: number,\r\n    depTime: string,\r\n    duration: string\r\n  ): RouteProgress => {\r\n    if (waypoints.length < 2) return {\r\n      position: [0, 0],\r\n      currentTime: new Date(depTime),\r\n      percentage: 0\r\n    };\r\n  \r\n    // Add 10 minutes for taxi at each end\r\n    const taxiTime = 10 * 60 * 1000; // 10 minutes in milliseconds\r\n    const [hours, minutes] = duration.split('h ').map(part => \r\n      parseInt(part.replace('m', ''))\r\n    );\r\n    const totalDurationMs = (hours * 3600000) + (minutes * 60000);\r\n    const flightDurationMs = totalDurationMs - (taxiTime * 2);\r\n    \r\n    // Calculate the adjusted progress percentage for actual route position\r\n    let adjustedPercentage = percentage;\r\n    \r\n    // Calculate taxi time percentages based on actual taxi time\r\n    const taxiPercentage = (taxiTime / totalDurationMs) * 100;\r\n    \r\n    if (percentage <= taxiPercentage) {\r\n      // Initial taxi phase - position stays at first waypoint\r\n      adjustedPercentage = 0;\r\n    } else if (percentage >= (100 - taxiPercentage)) {\r\n      // Final taxi phase - position stays at last waypoint\r\n      adjustedPercentage = 100;\r\n    } else {\r\n      // Flight phase - rescale percentage to account for taxi time\r\n      const flightRange = 100 - (2 * taxiPercentage);\r\n      adjustedPercentage = ((percentage - taxiPercentage) / flightRange) * 100;\r\n    }\r\n    \r\n    // Calculate position along route based on adjusted percentage\r\n    const totalSegments = waypoints.length - 1;\r\n    const segmentPercentage = (adjustedPercentage * totalSegments) / 100;\r\n    const currentSegment = Math.floor(segmentPercentage);\r\n    const segmentProgress = segmentPercentage - currentSegment;\r\n  \r\n    // Get the position\r\n    let position;\r\n    if (adjustedPercentage >= 100) {\r\n      position = [waypoints[totalSegments].lat, waypoints[totalSegments].lon] as [number, number];\r\n    } else if (adjustedPercentage <= 0) {\r\n      position = [waypoints[0].lat, waypoints[0].lon] as [number, number];\r\n    } else {\r\n      const start = waypoints[currentSegment];\r\n      const end = waypoints[currentSegment + 1];\r\n      \r\n      const lat = start.lat + (end.lat - start.lat) * segmentProgress;\r\n      const lon = start.lon + (end.lon - start.lon) * segmentProgress;\r\n      position = [lat, lon] as [number, number];\r\n    }\r\n    \r\n    // Calculate current time based on original percentage (including taxi time)\r\n    const startTime = new Date(depTime);\r\n    const elapsedMs = (totalDurationMs * percentage) / 100;\r\n    const currentTime = new Date(startTime.getTime() + elapsedMs);\r\n  \r\n    return {\r\n      position,\r\n      currentTime,\r\n      percentage\r\n    };\r\n  }, []);\r\n  \r\n  const calculateRoutePositions = useCallback((\r\n    plan: FlightPlan,\r\n    depTime: string\r\n  ) => {\r\n    if (!plan.duration || !plan.route.nodes.length) {\r\n      setCachedPositions([]);\r\n      return;\r\n    }\r\n  \r\n    const positions: CachedRoutePosition[] = [];\r\n    // Create more granular positions for smoother slider\r\n    const INTERVAL = 5 * 60 * 1000; // 5 minutes in milliseconds (more granular)\r\n    const [hours, minutes] = plan.duration.split('h ').map(part => \r\n      parseInt(part.replace('m', ''))\r\n    );\r\n    \r\n    const totalDurationMs = (hours * 3600000) + (minutes * 60000) + (20 * 60 * 1000); // Including taxi time\r\n    const steps = Math.ceil(totalDurationMs / INTERVAL);\r\n  \r\n    for (let i = 0; i <= steps; i++) {\r\n      const percentage = (i * INTERVAL * 100) / totalDurationMs;\r\n      if (percentage > 100) break;\r\n  \r\n      const progress = calculateRoutePosition(\r\n        plan.route.nodes,\r\n        percentage,\r\n        depTime,\r\n        plan.duration\r\n      );\r\n  \r\n      positions.push({\r\n        ...progress,\r\n        timeString: progress.currentTime.toLocaleTimeString()\r\n      });\r\n    }\r\n  \r\n    setCachedPositions(positions);\r\n    // Initialize the slider to 0%\r\n    setSliderValue(0);\r\n    setRouteProgress(positions[0] || null);\r\n  }, [calculateRoutePosition]);\r\n  \r\n  const handleSliderChange = useCallback((\r\n    event: Event,\r\n    value: number | number[]\r\n  ) => {\r\n    const percentage = typeof value === 'number' ? value : value[0];\r\n    setSliderValue(percentage);\r\n    \r\n    if (cachedPositions.length === 0) return;\r\n    \r\n    // Use the cached positions directly\r\n    const position = findClosestPosition(cachedPositions, percentage);\r\n    if (position) {\r\n      setRouteProgress({\r\n        position: position.position,\r\n        currentTime: position.currentTime,\r\n        percentage\r\n      });\r\n    }\r\n  }, [cachedPositions]);\r\n\r\n  // When departure or arrival time changes, recalculate\r\n  useEffect(() => {\r\n    if (flightPlans.length > 0 && departureTime && arrivalTime) {\r\n      const plan = flightPlans[0];\r\n      plan.duration = calculateDuration(\r\n        departureTime,\r\n        arrivalTime,\r\n        plan.fromICAO,\r\n        plan.toICAO\r\n      );\r\n      calculateRoutePositions(plan, departureTime);\r\n    }\r\n  }, [departureTime, arrivalTime, flightPlans, calculateDuration, calculateRoutePositions]);\r\n\r\n  return (\r\n    <div className={`${isDarkMode ? 'bg-gray-900' : 'bg-gray-100'} p-4 overflow-hidden`}>\r\n      <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow p-6 h-full mx-auto`}>\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 h-full\">\r\n          {/* Input section */}\r\n          <div className=\"lg:col-span-1 space-y-4\">\r\n            <div>\r\n              <label className={`block text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>\r\n                Departure (ICAO/Name)\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={departure}\r\n                onChange={(e) => setDeparture(e.target.value.toUpperCase())}\r\n                className={`w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  isDarkMode ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900'\r\n                }`}\r\n                placeholder=\"EGLL\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className={`block text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>\r\n                Departure Time\r\n              </label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                value={departureTime}\r\n                onChange={(e) => handleDepartureTimeChange(e.target.value)}\r\n                className={`w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  isDarkMode ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900'\r\n                }`}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className={`block text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>\r\n                Arrival (ICAO/Name)\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={arrival}\r\n                onChange={(e) => setArrival(e.target.value.toUpperCase())}\r\n                className={`w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  isDarkMode ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900'\r\n                }`}\r\n                placeholder=\"KJFK\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className={`block text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>\r\n                Arrival Time\r\n              </label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                value={arrivalTime}\r\n                onChange={(e) => setArrivalTime(e.target.value)}\r\n                className={`w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n                  isDarkMode ? 'bg-gray-700 text-white border-gray-600' : 'bg-white text-gray-900'\r\n                }`}\r\n              />\r\n            </div>\r\n            <button\r\n              onClick={searchFlightPlans}\r\n              disabled={loading || !departure || !arrival}\r\n              className=\"w-full bg-blue-600 text-white p-3 rounded hover:bg-blue-700 disabled:bg-blue-300 flex items-center justify-center gap-2\"\r\n            >\r\n              {loading ? (\r\n                <>\r\n                  <Loader className=\"animate-spin\" size={16} />\r\n                  Searching...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Search size={16} />\r\n                  Search Flight Plans\r\n                </>\r\n              )}\r\n            </button>\r\n          </div>\r\n\r\n          {/* Map and details section */}\r\n          <div className=\"lg:col-span-3 space-y-4\">\r\n            {error && (\r\n              <div className={`p-3 rounded ${\r\n                isDarkMode ? 'bg-red-900 text-red-100' : 'bg-red-100 text-red-700'\r\n              }`}>\r\n                {error}\r\n              </div>\r\n            )}\r\n            \r\n            {/* Map container */}\r\n            <div className={`h-[calc(100vh-300px)] rounded border ${\r\n              isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'\r\n            }`}>\r\n              <MapContainer\r\n                style={{ height: '100%', width: '100%' }}\r\n                center={[51.505, -0.09]}\r\n                zoom={2}\r\n                scrollWheelZoom={true}\r\n              >\r\n                <TileLayer\r\n                  attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                  url={isDarkMode \r\n                    ? \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\"\r\n                    : \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                  }\r\n                />\r\n                <DayNightTerminator currentTime={routeProgress?.currentTime ? new Date(routeProgress.currentTime.getTime() + routeProgress.currentTime.getTimezoneOffset() * 60000) : undefined} />\r\n                {flightPlans.map((plan) => (\r\n                  <React.Fragment key={plan.id}>\r\n                    <Polyline\r\n                      positions={plan.route.nodes.map(w => [w.lat, w.lon])}\r\n                      color={isDarkMode ? \"white\" : \"black\"}\r\n                    />\r\n                    {routeProgress && (\r\n                      <Marker\r\n                        position={routeProgress.position}\r\n                        icon={L.divIcon({\r\n                          html: `<div style=\"transform: rotate(${(() => {\r\n                            const currentIdx = Math.floor((routeProgress.percentage * (plan.route.nodes.length - 1)) / 100);\r\n                            const nextIdx = Math.min(currentIdx + 1, plan.route.nodes.length - 1);\r\n                            const start: [number, number] = [plan.route.nodes[currentIdx].lat, plan.route.nodes[currentIdx].lon];\r\n                            const end: [number, number] = [plan.route.nodes[nextIdx].lat, plan.route.nodes[nextIdx].lon];\r\n                            return calculateBearing(start, end);\r\n                          })()}deg)\">\r\n                            <img src=\"${planeIcon}\" alt=\"plane\" style=\"width: 24px; height: 24px;\" />\r\n                          </div>`,\r\n                          className: '',\r\n                          iconSize: [24, 24],\r\n                          iconAnchor: [12, 12]\r\n                        })}\r\n                      />\r\n                    )}\r\n                    {plan.route.nodes.length > 0 && (\r\n                      <SetBoundsToRoute waypoints={plan.route.nodes} />\r\n                    )}\r\n                  </React.Fragment>\r\n                ))}\r\n              </MapContainer>\r\n            </div>\r\n\r\n            {/* Flight plan details */}\r\n            {flightPlans.length > 0 && (\r\n              <div className={`${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'} p-4 rounded border`}>\r\n                <h2 className={`text-xl font-semibold mb-4 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\r\n                  Flight Plan Details\r\n                </h2>\r\n                <div className=\"space-y-4\">\r\n                  {flightPlans.map((plan) => (\r\n                    <div key={plan.id}>\r\n                      <div className=\"grid grid-cols-2 gap-4 mb-4\">\r\n                        <div>\r\n                          <div className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\r\n                            {plan.fromICAO} → {plan.toICAO}\r\n                          </div>\r\n                          <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\r\n                            {plan.fromName} → {plan.toName}\r\n                          </div>\r\n                          {plan.duration && (\r\n                            <div className=\"text-sm font-medium text-blue-400\">\r\n                              Duration: {plan.duration}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"text-right\">\r\n                          <div className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\r\n                            {Math.round(plan.distance)} nm\r\n                          </div>\r\n                          {departureTime && (\r\n                            <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\r\n                              Departure: {new Date(departureTime).toLocaleString()} - \r\n                              {getAirportTimezone(plan.fromICAO)?.timezone}\r\n                            </div>\r\n                          )}\r\n                          {arrivalTime && (\r\n                            <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\r\n                              Arrival: {new Date(arrivalTime).toLocaleString()} - \r\n                              {getAirportTimezone(plan.toICAO)?.timezone}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div>\r\n                        <div className=\"flex items-center justify-between mb-2\">\r\n                          <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\r\n                            {routeProgress?.currentTime.toLocaleTimeString() || 'Route Progress'}\r\n                          </span>\r\n                          {routeProgress && (\r\n                            <span className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\r\n                              {Math.round(routeProgress.percentage)}%\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"relative\">\r\n                          <Slider\r\n                            value={sliderValue}\r\n                            onChange={handleSliderChange}\r\n                            aria-labelledby=\"route-progress-slider\"\r\n                            min={0}\r\n                            max={100}\r\n                            step={0.1}\r\n                            disabled={!departureTime || !cachedPositions.length}\r\n                            sx={{\r\n                              '& .MuiSlider-thumb': {\r\n                                transition: 'none',\r\n                                backgroundColor: isDarkMode ? '#fff' : '#1976d2',\r\n                                '&:hover, &.Mui-focusVisible': {\r\n                                  backgroundColor: isDarkMode ? '#e0e0e0' : '#1565c0',\r\n                                },\r\n                              },\r\n                              '& .MuiSlider-track': {\r\n                                transition: 'none',\r\n                                backgroundColor: isDarkMode ? '#fff' : '#1976d2',\r\n                              },\r\n                              '& .MuiSlider-rail': {\r\n                                backgroundColor: isDarkMode ? '#4b5563' : '#e5e7eb',\r\n                              },\r\n                            }}\r\n                          />\r\n                          <div className=\"relative group\">\r\n                            {cachedPositions.filter((_, idx) => idx % 3 === 0).map((pos, idx) => (\r\n                              <div\r\n                                key={idx}\r\n                                className=\"absolute -translate-x-1/2 text-xs text-gray-400\"\r\n                                style={{ left: `${pos.percentage}%` }}\r\n                              >\r\n                                |\r\n                                <span className=\"hidden group-hover:block absolute -translate-x-1/2 whitespace-nowrap\">\r\n                                  {pos.timeString}\r\n                                </span>\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                        {routeProgress && (\r\n                          <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} mt-4`}>\r\n                            Current Position: {routeProgress.position[0].toFixed(2)}, {routeProgress.position[1].toFixed(2)}\r\n                            <br />\r\n                            Current Time (UTC): {(() => {\r\n                              const depAirport = getAirportTimezone(flightPlans[0]?.fromICAO || '');\r\n                              if (!depAirport) return routeProgress.currentTime.toLocaleString();\r\n                              const utcTime = new Date(routeProgress.currentTime.getTime() - \r\n                              ((depAirport.offset.gmt + depAirport.offset.dst) * 3600000));\r\n                              return utcTime.toLocaleString() + ' UTC';\r\n                            })()}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlightCalculator;","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgPlaneIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"#ffff00\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M22,16v-2l-8.5-5V3.5C13.5,2.67,12.83,2,12,2s-1.5,0.67-1.5,1.5V9L2,14v2l8.5-2.5V19L8,20.5V22l4-1l4,1v-1.5L13.5,19 v-5.5L22,16z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPlaneIcon);\nexport default __webpack_public_path__ + \"static/media/plane-icon.5312c99550d9e701054eea554971757c.svg\";\nexport { ForwardRef as ReactComponent };"],"names":["airportData","require","L","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","SetBoundsToRoute","_ref","waypoints","map","useMap","useEffect","length","latLngs","w","lat","lon","bounds","fitBounds","padding","DayNightTerminator","_ref2","currentTime","terminatorRef","useRef","current","terminator","addTo","removeLayer","setTime","FlightCalculator","isDarkMode","useTheme","departure","setDeparture","useState","arrival","setArrival","loading","setLoading","error","setError","flightPlans","setFlightPlans","departureTime","setDepartureTime","arrivalTime","setArrivalTime","routeProgress","setRouteProgress","sliderValue","setSliderValue","cachedPositions","setCachedPositions","getAirportTimezone","useCallback","icao","airport","getAirportByIcao","iata","airportTimezone","filter","apt","code","err","calculateDuration","depTime","arrTime","depICAO","arrICAO","depAirport","arrAirport","depDate","Date","arrDate","depUTC","getTime","offset","dst","durationMs","Math","floor","round","calculateRoutePosition","percentage","duration","position","taxiTime","hours","minutes","split","part","parseInt","replace","totalDurationMs","adjustedPercentage","taxiPercentage","totalSegments","segmentPercentage","currentSegment","segmentProgress","start","end","startTime","elapsedMs","calculateRoutePositions","plan","route","nodes","positions","INTERVAL","steps","ceil","i","progress","push","timeString","toLocaleTimeString","handleSliderChange","event","value","findClosestPosition","target","low","high","mid","abs","fromICAO","toICAO","_jsx","className","children","_jsxs","type","onChange","e","toUpperCase","placeholder","time","newArrivalTime","setHours","getHours","toISOString","slice","handleDepartureTimeChange","onClick","async","searchResponse","fetch","headers","ok","Error","plans","json","latestPlan","planResponse","id","planDetails","message","disabled","_Fragment","Loader","size","Search","MapContainer","style","height","width","center","zoom","scrollWheelZoom","TileLayer","attribution","url","getTimezoneOffset","undefined","React","Polyline","color","Marker","icon","html","currentIdx","nextIdx","min","calculateBearing","startLat","PI","startLng","endLat","dLng","y","sin","cos","x","bearing","atan2","planeIcon","iconSize","iconAnchor","_getAirportTimezone","_getAirportTimezone2","fromName","toName","distance","toLocaleString","timezone","Slider","max","step","sx","transition","backgroundColor","_","idx","pos","left","toFixed","_flightPlans$","gmt"],"sourceRoot":""}