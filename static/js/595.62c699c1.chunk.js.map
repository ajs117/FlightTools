{"version":3,"file":"static/js/595.62c699c1.chunk.js","mappings":"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","sources":["components/InFlightTracker.tsx","plane-icon.svg"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useTheme } from '../context/ThemeContext';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport planeIcon from '../plane-icon.svg';\r\n\r\n// Fix for default markers\r\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\ninterface FlightData {\r\n  latitude: number | null;\r\n  longitude: number | null;\r\n  altitude: number | null;\r\n  speed: number | null;\r\n  heading: number | null;\r\n  lastUpdate: Date;\r\n  gpsAccuracy: number | null;\r\n}\r\n\r\n// Conversion functions\r\nconst metersToFeet = (meters: number): number => {\r\n  return Math.round(meters * 3.28084);\r\n};\r\n\r\nconst kmhToKnots = (kmh: number): number => {\r\n  return Math.round(kmh * 0.539957);\r\n};\r\n\r\nconst InFlightTracker: React.FC = () => {\r\n  const { isDarkMode } = useTheme();\r\n  const mapRef = useRef<L.Map | null>(null);\r\n  const markerRef = useRef<L.Marker | null>(null);\r\n  const accuracyCircleRef = useRef<L.Circle | null>(null);\r\n  const [flightData, setFlightData] = useState<FlightData>({\r\n    latitude: null,\r\n    longitude: null,\r\n    altitude: null,\r\n    speed: null,\r\n    heading: null,\r\n    lastUpdate: new Date(),\r\n    gpsAccuracy: null,\r\n  });\r\n  const [error, setError] = useState<string | null>(null);\r\n  const watchId = useRef<number | null>(null);\r\n  const lastKnownPosition = useRef<GeolocationPosition | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize map\r\n    if (!mapRef.current) {\r\n      mapRef.current = L.map('map').setView([0, 0], 2);\r\n      L.tileLayer(isDarkMode \r\n        ? \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\"\r\n        : \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n        attribution: 'Â© OpenStreetMap contributors'\r\n      }).addTo(mapRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (mapRef.current) {\r\n        mapRef.current.remove();\r\n        mapRef.current = null;\r\n      }\r\n    };\r\n  }, [isDarkMode]);\r\n\r\n  useEffect(() => {\r\n    const startTracking = async () => {\r\n      try {\r\n        // Start watching position with high accuracy\r\n        watchId.current = navigator.geolocation.watchPosition(\r\n          (position) => {\r\n            lastKnownPosition.current = position;\r\n            const newData = {\r\n              latitude: position.coords.latitude,\r\n              longitude: position.coords.longitude,\r\n              altitude: position.coords.altitude,\r\n              speed: position.coords.speed,\r\n              heading: position.coords.heading,\r\n              lastUpdate: new Date(),\r\n              gpsAccuracy: position.coords.accuracy,\r\n            };\r\n            setFlightData(newData);\r\n\r\n            // Update map\r\n            if (mapRef.current && newData.latitude && newData.longitude) {\r\n              const latLng = L.latLng(newData.latitude, newData.longitude);\r\n              \r\n              // Update or create marker with plane icon\r\n              if (markerRef.current) {\r\n                markerRef.current.setLatLng(latLng);\r\n                markerRef.current.setIcon(L.divIcon({\r\n                  html: `<div style=\"transform: rotate(${newData.heading || 0}deg)\">\r\n                    <img src=\"${planeIcon}\" alt=\"plane\" style=\"width: 24px; height: 24px;\" />\r\n                  </div>`,\r\n                  className: '',\r\n                  iconSize: [24, 24],\r\n                  iconAnchor: [12, 12]\r\n                }));\r\n              } else {\r\n                markerRef.current = L.marker(latLng, {\r\n                  icon: L.divIcon({\r\n                    html: `<div style=\"transform: rotate(${newData.heading || 0}deg)\">\r\n                      <img src=\"${planeIcon}\" alt=\"plane\" style=\"width: 24px; height: 24px;\" />\r\n                    </div>`,\r\n                    className: '',\r\n                    iconSize: [24, 24],\r\n                    iconAnchor: [12, 12]\r\n                  })\r\n                }).addTo(mapRef.current);\r\n              }\r\n\r\n              // Update or create accuracy circle\r\n              if (accuracyCircleRef.current) {\r\n                accuracyCircleRef.current.setLatLng(latLng);\r\n                accuracyCircleRef.current.setRadius(newData.gpsAccuracy || 0);\r\n              } else if (newData.gpsAccuracy) {\r\n                accuracyCircleRef.current = L.circle(latLng, {\r\n                  radius: newData.gpsAccuracy,\r\n                  color: 'blue',\r\n                  fillColor: '#30f',\r\n                  fillOpacity: 0.15\r\n                }).addTo(mapRef.current);\r\n              }\r\n\r\n              // Center map on position\r\n              mapRef.current.setView(latLng, mapRef.current.getZoom());\r\n            }\r\n          },\r\n          (error) => {\r\n            console.warn('GPS Error:', error);\r\n            // Keep using last known position if available\r\n            if (lastKnownPosition.current) {\r\n              const newData = {\r\n                latitude: lastKnownPosition.current.coords.latitude,\r\n                longitude: lastKnownPosition.current.coords.longitude,\r\n                altitude: lastKnownPosition.current.coords.altitude,\r\n                speed: lastKnownPosition.current.coords.speed,\r\n                heading: lastKnownPosition.current.coords.heading,\r\n                lastUpdate: new Date(),\r\n                gpsAccuracy: lastKnownPosition.current.coords.accuracy,\r\n              };\r\n              setFlightData(newData);\r\n\r\n              // Update map with last known position\r\n              if (mapRef.current && newData.latitude && newData.longitude) {\r\n                const latLng = L.latLng(newData.latitude, newData.longitude);\r\n                if (markerRef.current) {\r\n                  markerRef.current.setLatLng(latLng);\r\n                  markerRef.current.setIcon(L.divIcon({\r\n                    html: `<div style=\"transform: rotate(${newData.heading || 0}deg)\">\r\n                      <img src=\"${planeIcon}\" alt=\"plane\" style=\"width: 24px; height: 24px;\" />\r\n                    </div>`,\r\n                    className: '',\r\n                    iconSize: [24, 24],\r\n                    iconAnchor: [12, 12]\r\n                  }));\r\n                }\r\n                if (accuracyCircleRef.current) {\r\n                  accuracyCircleRef.current.setLatLng(latLng);\r\n                  accuracyCircleRef.current.setRadius(newData.gpsAccuracy || 0);\r\n                }\r\n              }\r\n            }\r\n          },\r\n          {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0,\r\n          }\r\n        );\r\n\r\n        return () => {\r\n          if (watchId.current !== null) {\r\n            navigator.geolocation.clearWatch(watchId.current);\r\n          }\r\n        };\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to start tracking');\r\n      }\r\n    };\r\n\r\n    startTracking();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`${isDarkMode ? 'bg-gray-900' : 'bg-gray-100'} p-2 sm:p-4`}>\r\n      <div className={`${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow p-3 sm:p-6 max-w-full mx-auto h-[calc(100vh-2rem)]`}>\r\n        <div className=\"flex flex-col h-full\">\r\n          <div className=\"flex-none mb-2 sm:mb-4\">\r\n            <h2 className={`text-xl sm:text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>\r\n              In-Flight Tracker\r\n            </h2>\r\n          </div>\r\n          \r\n          {error && (\r\n            <div className={`flex-none p-2 sm:p-3 rounded mb-2 sm:mb-4 text-sm sm:text-base ${\r\n              isDarkMode ? 'bg-red-900 text-red-100' : 'bg-red-100 text-red-700'\r\n            }`}>\r\n              {error}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex-1 flex flex-col lg:flex-row gap-3 sm:gap-4 min-h-0\">\r\n            {/* Map Section - Takes up most of the space on large screens, full width on mobile */}\r\n            <div className=\"lg:flex-grow rounded-lg overflow-hidden h-[50vh] lg:h-auto\">\r\n              <div id=\"map\" className=\"w-full h-full\"></div>\r\n            </div>\r\n\r\n            {/* Info Panels Section - Side by side on mobile, stacked on the side for larger screens */}\r\n            <div className=\"lg:w-80 flex flex-col gap-3 sm:gap-4 overflow-y-auto\">\r\n              {/* Flight Data Panel */}\r\n              <div className={`p-3 sm:p-4 rounded-lg ${isDarkMode ? 'bg-blue-900 text-blue-100' : 'bg-blue-100 text-blue-700'}`}>\r\n                <div className=\"grid grid-cols-2 gap-2 sm:gap-4\">\r\n                  <div>\r\n                    <div className={`text-xs sm:text-sm font-medium text-center ${\r\n                      isDarkMode ? 'text-blue-200' : 'text-blue-800'\r\n                    }`}>\r\n                      Altitude\r\n                    </div>\r\n                    <div className=\"text-lg sm:text-xl font-bold text-center\">\r\n                      {flightData.altitude ? metersToFeet(flightData.altitude) : 'N/A'}ft\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <div className={`text-xs sm:text-sm font-medium text-center ${\r\n                      isDarkMode ? 'text-blue-200' : 'text-blue-800'\r\n                    }`}>\r\n                      Speed\r\n                    </div>\r\n                    <div className=\"text-lg sm:text-xl font-bold text-center\">\r\n                      {flightData.speed ? kmhToKnots(flightData.speed * 3.6) : 'N/A'}kts\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <div className={`text-xs sm:text-sm font-medium text-center ${\r\n                      isDarkMode ? 'text-blue-200' : 'text-blue-800'\r\n                    }`}>\r\n                      Heading\r\n                    </div>\r\n                    <div className=\"text-lg sm:text-xl font-bold text-center\">\r\n                      {flightData.heading?.toFixed(1) ?? 'N/A'}Â°\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <div className={`text-xs sm:text-sm font-medium text-center ${\r\n                      isDarkMode ? 'text-blue-200' : 'text-blue-800'\r\n                    }`}>\r\n                      GPS Accuracy\r\n                    </div>\r\n                    <div className=\"text-lg sm:text-xl font-bold text-center\">\r\n                      {flightData.gpsAccuracy?.toFixed(1) ?? 'N/A'}m\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Position Panel */}\r\n              <div className={`p-3 sm:p-4 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\r\n                <h3 className={`text-sm sm:text-base lg:text-lg font-semibold mb-2 sm:mb-3 ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>\r\n                  Position\r\n                </h3>\r\n                <div className=\"space-y-1 sm:space-y-2 text-sm\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className={isDarkMode ? 'text-gray-300' : 'text-gray-600'}>Latitude:</span>\r\n                    <span className=\"font-mono\">{flightData.latitude?.toFixed(6) ?? 'N/A'}Â°</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className={isDarkMode ? 'text-gray-300' : 'text-gray-600'}>Longitude:</span>\r\n                    <span className=\"font-mono\">{flightData.longitude?.toFixed(6) ?? 'N/A'}Â°</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Last Update Panel */}\r\n              <div className={`p-3 sm:p-4 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\r\n                <h3 className={`text-sm sm:text-base lg:text-lg font-semibold mb-2 sm:mb-3 ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>\r\n                  Last Update\r\n                </h3>\r\n                <div className={`text-center font-mono text-sm sm:text-base ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\r\n                  {flightData.lastUpdate.toLocaleTimeString()}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InFlightTracker; ","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgPlaneIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"#ffff00\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M22,16v-2l-8.5-5V3.5C13.5,2.67,12.83,2,12,2s-1.5,0.67-1.5,1.5V9L2,14v2l8.5-2.5V19L8,20.5V22l4-1l4,1v-1.5L13.5,19 v-5.5L22,16z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPlaneIcon);\nexport default __webpack_public_path__ + \"static/media/plane-icon.5312c99550d9e701054eea554971757c.svg\";\nexport { ForwardRef as ReactComponent };"],"names":["L","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","InFlightTracker","_flightData$heading$t","_flightData$heading","_flightData$gpsAccura","_flightData$gpsAccura2","_flightData$latitude$","_flightData$latitude","_flightData$longitude","_flightData$longitude2","isDarkMode","useTheme","mapRef","useRef","markerRef","accuracyCircleRef","flightData","setFlightData","useState","latitude","longitude","altitude","speed","heading","lastUpdate","Date","gpsAccuracy","error","setError","watchId","lastKnownPosition","useEffect","current","setView","attribution","addTo","remove","async","navigator","geolocation","watchPosition","position","newData","coords","accuracy","latLng","setLatLng","setIcon","html","planeIcon","className","iconSize","iconAnchor","icon","setRadius","radius","color","fillColor","fillOpacity","getZoom","console","warn","enableHighAccuracy","timeout","maximumAge","clearWatch","err","Error","message","startTracking","_jsx","children","_jsxs","id","meters","Math","round","kmh","toFixed","toLocaleTimeString"],"sourceRoot":""}